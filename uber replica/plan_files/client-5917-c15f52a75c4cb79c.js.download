"use strict";(self.webpackChunkFusion=self.webpackChunkFusion||[]).push([[5917],{56858:(e,t,n)=>{n.d(t,{Z:()=>y});var o=n(97455),i=n(51007),r=n(17731),s=n(57891),a=n(93742),l=n(55478),c=n(62492),d=n(47077),u=n(22519),p=n(99);class g extends d.Z{constructor(e){super({...e,attributes:{positions:{size:3,padding:18,initialize:!0,type:e.fp64?Float64Array:Float32Array},segmentTypes:{size:1,type:Uint8ClampedArray}}})}get(e){return this.attributes[e]}getGeometryFromBuffer(e){return this.normalize?super.getGeometryFromBuffer(e):null}normalizeGeometry(e){return this.normalize?function(e,t,n,o){let i;if(Array.isArray(e[0])){const n=e.length*t;i=new Array(n);for(let n=0;n<e.length;n++)for(let o=0;o<t;o++)i[n*t+o]=e[n][o]||0}else i=e;return n?(0,u.d)(i,{size:t,gridResolution:n}):o?(0,p.c)(i,{size:t}):i}(e,this.positionSize,this.opts.resolution,this.opts.wrapLongitude):e}getGeometrySize(e){if(h(e)){let t=0;for(const n of e)t+=this.getGeometrySize(n);return t}const t=this.getPathLength(e);return t<2?0:this.isClosed(e)?t<3?0:t+2:t}updateGeometryAttributes(e,t){if(0!==t.geometrySize)if(e&&h(e))for(const n of e){const e=this.getGeometrySize(n);t.geometrySize=e,this.updateGeometryAttributes(n,t),t.vertexStart+=e}else this._updateSegmentTypes(e,t),this._updatePositions(e,t)}_updateSegmentTypes(e,t){const n=this.attributes.segmentTypes,o=!!e&&this.isClosed(e),{vertexStart:i,geometrySize:r}=t;n.fill(0,i,i+r),o?(n[i]=4,n[i+r-2]=4):(n[i]+=1,n[i+r-2]+=2),n[i+r-1]=4}_updatePositions(e,t){const{positions:n}=this.attributes;if(!n||!e)return;const{vertexStart:o,geometrySize:i}=t,r=new Array(3);for(let t=o,s=0;s<i;t++,s++)this.getPointOnPath(e,s,r),n[3*t]=r[0],n[3*t+1]=r[1],n[3*t+2]=r[2]}getPathLength(e){return e.length/this.positionSize}getPointOnPath(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];const{positionSize:o}=this;t*o>=e.length&&(t+=1-e.length/o);const i=t*o;return n[0]=e[i],n[1]=e[i+1],n[2]=3===o&&e[i+2]||0,n}isClosed(e){if(!this.normalize)return Boolean(this.opts.loop);const{positionSize:t}=this,n=e.length-t;return e[0]===e[n]&&e[1]===e[n+1]&&(2===t||e[2]===e[n+2])}}function h(e){return Array.isArray(e[0])}const m=[0,0,0,255],f={widthUnits:"meters",widthScale:{type:"number",min:0,value:1},widthMinPixels:{type:"number",min:0,value:0},widthMaxPixels:{type:"number",min:0,value:Number.MAX_SAFE_INTEGER},jointRounded:!1,capRounded:!1,miterLimit:{type:"number",min:0,value:4},billboard:!1,_pathType:null,getPath:{type:"accessor",value:e=>e.path},getColor:{type:"accessor",value:m},getWidth:{type:"accessor",value:1},rounded:{deprecatedFor:["jointRounded","capRounded"]}},v={enter:(e,t)=>t.length?t.subarray(t.length-e.length):e};class y extends i.Z{constructor(){super(...arguments),(0,o.Z)(this,"state",void 0)}getShaders(){return super.getShaders({vs:"#define SHADER_NAME path-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute float instanceTypes;\nattribute vec3 instanceStartPositions;\nattribute vec3 instanceEndPositions;\nattribute vec3 instanceLeftPositions;\nattribute vec3 instanceRightPositions;\nattribute vec3 instanceLeftPositions64Low;\nattribute vec3 instanceStartPositions64Low;\nattribute vec3 instanceEndPositions64Low;\nattribute vec3 instanceRightPositions64Low;\nattribute float instanceStrokeWidths;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\n\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\nuniform float jointType;\nuniform float capType;\nuniform float miterLimit;\nuniform bool billboard;\nuniform int widthUnits;\n\nuniform float opacity;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\nvarying vec2 vPathPosition;\nvarying float vPathLength;\nvarying float vJointType;\n\nconst float EPSILON = 0.001;\nconst vec3 ZERO_OFFSET = vec3(0.0);\n\nfloat flipIfTrue(bool flag) {\n  return -(float(flag) * 2. - 1.);\n}\n\n// calculate line join positions\nvec3 lineJoin(\n  vec3 prevPoint, vec3 currPoint, vec3 nextPoint,\n  vec2 width\n) {\n  bool isEnd = positions.x > 0.0;\n  // side of the segment - -1: left, 0: center, 1: right\n  float sideOfPath = positions.y;\n  float isJoint = float(sideOfPath == 0.0);\n\n  vec3 deltaA3 = (currPoint - prevPoint);\n  vec3 deltaB3 = (nextPoint - currPoint);\n\n  mat3 rotationMatrix;\n  bool needsRotation = !billboard && project_needs_rotation(currPoint, rotationMatrix);\n  if (needsRotation) {\n    deltaA3 = deltaA3 * rotationMatrix;\n    deltaB3 = deltaB3 * rotationMatrix;\n  }\n  vec2 deltaA = deltaA3.xy / width;\n  vec2 deltaB = deltaB3.xy / width;\n\n  float lenA = length(deltaA);\n  float lenB = length(deltaB);\n\n  vec2 dirA = lenA > 0. ? normalize(deltaA) : vec2(0.0, 0.0);\n  vec2 dirB = lenB > 0. ? normalize(deltaB) : vec2(0.0, 0.0);\n\n  vec2 perpA = vec2(-dirA.y, dirA.x);\n  vec2 perpB = vec2(-dirB.y, dirB.x);\n\n  // tangent of the corner\n  vec2 tangent = dirA + dirB;\n  tangent = length(tangent) > 0. ? normalize(tangent) : perpA;\n  // direction of the corner\n  vec2 miterVec = vec2(-tangent.y, tangent.x);\n  // direction of the segment\n  vec2 dir = isEnd ? dirA : dirB;\n  // direction of the extrusion\n  vec2 perp = isEnd ? perpA : perpB;\n  // length of the segment\n  float L = isEnd ? lenA : lenB;\n\n  // A = angle of the corner\n  float sinHalfA = abs(dot(miterVec, perp));\n  float cosHalfA = abs(dot(dirA, miterVec));\n\n  // -1: right, 1: left\n  float turnDirection = flipIfTrue(dirA.x * dirB.y >= dirA.y * dirB.x);\n\n  // relative position to the corner:\n  // -1: inside (smaller side of the angle)\n  // 0: center\n  // 1: outside (bigger side of the angle)\n  float cornerPosition = sideOfPath * turnDirection;\n\n  float miterSize = 1.0 / max(sinHalfA, EPSILON);\n  // trim if inside corner extends further than the line segment\n  miterSize = mix(\n    min(miterSize, max(lenA, lenB) / max(cosHalfA, EPSILON)),\n    miterSize,\n    step(0.0, cornerPosition)\n  );\n\n  vec2 offsetVec = mix(miterVec * miterSize, perp, step(0.5, cornerPosition))\n    * (sideOfPath + isJoint * turnDirection);\n\n  // special treatment for start cap and end cap\n  bool isStartCap = lenA == 0.0 || (!isEnd && (instanceTypes == 1.0 || instanceTypes == 3.0));\n  bool isEndCap = lenB == 0.0 || (isEnd && (instanceTypes == 2.0 || instanceTypes == 3.0));\n  bool isCap = isStartCap || isEndCap;\n\n  // extend out a triangle to envelope the round cap\n  if (isCap) {\n    offsetVec = mix(perp * sideOfPath, dir * capType * 4.0 * flipIfTrue(isStartCap), isJoint);\n    vJointType = capType;\n  } else {\n    vJointType = jointType;\n  }\n\n  // Generate variables for fragment shader\n  vPathLength = L;\n  vCornerOffset = offsetVec;\n  vMiterLength = dot(vCornerOffset, miterVec * turnDirection);\n  vMiterLength = isCap ? isJoint : vMiterLength;\n\n  vec2 offsetFromStartOfPath = vCornerOffset + deltaA * float(isEnd);\n  vPathPosition = vec2(\n    dot(offsetFromStartOfPath, perp),\n    dot(offsetFromStartOfPath, dir)\n  );\n  geometry.uv = vPathPosition;\n\n  float isValid = step(instanceTypes, 3.5);\n  vec3 offset = vec3(offsetVec * width * isValid, 0.0);\n\n  if (needsRotation) {\n    offset = rotationMatrix * offset;\n  }\n  return currPoint + offset;\n}\n\n// In clipspace extrusion, if a line extends behind the camera, clip it to avoid visual artifacts\nvoid clipLine(inout vec4 position, vec4 refPosition) {\n  if (position.w < EPSILON) {\n    float r = (EPSILON - refPosition.w) / (position.w - refPosition.w);\n    position = refPosition + (position - refPosition) * r;\n  }\n}\n\nvoid main() {\n  geometry.pickingColor = instancePickingColors;\n\n  vColor = vec4(instanceColors.rgb, instanceColors.a * opacity);\n\n  float isEnd = positions.x;\n\n  vec3 prevPosition = mix(instanceLeftPositions, instanceStartPositions, isEnd);\n  vec3 prevPosition64Low = mix(instanceLeftPositions64Low, instanceStartPositions64Low, isEnd);\n\n  vec3 currPosition = mix(instanceStartPositions, instanceEndPositions, isEnd);\n  vec3 currPosition64Low = mix(instanceStartPositions64Low, instanceEndPositions64Low, isEnd);\n\n  vec3 nextPosition = mix(instanceEndPositions, instanceRightPositions, isEnd);\n  vec3 nextPosition64Low = mix(instanceEndPositions64Low, instanceRightPositions64Low, isEnd);\n\n  geometry.worldPosition = currPosition;\n  vec2 widthPixels = vec2(clamp(\n    project_size_to_pixel(instanceStrokeWidths * widthScale, widthUnits),\n    widthMinPixels, widthMaxPixels) / 2.0);\n  vec3 width;\n\n  if (billboard) {\n    // Extrude in clipspace\n    vec4 prevPositionScreen = project_position_to_clipspace(prevPosition, prevPosition64Low, ZERO_OFFSET);\n    vec4 currPositionScreen = project_position_to_clipspace(currPosition, currPosition64Low, ZERO_OFFSET, geometry.position);\n    vec4 nextPositionScreen = project_position_to_clipspace(nextPosition, nextPosition64Low, ZERO_OFFSET);\n\n    clipLine(prevPositionScreen, currPositionScreen);\n    clipLine(nextPositionScreen, currPositionScreen);\n    clipLine(currPositionScreen, mix(nextPositionScreen, prevPositionScreen, isEnd));\n\n    width = vec3(widthPixels, 0.0);\n    DECKGL_FILTER_SIZE(width, geometry);\n\n    vec3 pos = lineJoin(\n      prevPositionScreen.xyz / prevPositionScreen.w,\n      currPositionScreen.xyz / currPositionScreen.w,\n      nextPositionScreen.xyz / nextPositionScreen.w,\n      project_pixel_size_to_clipspace(width.xy)\n    );\n\n    gl_Position = vec4(pos * currPositionScreen.w, currPositionScreen.w);\n  } else {\n    // Extrude in commonspace\n    prevPosition = project_position(prevPosition, prevPosition64Low);\n    currPosition = project_position(currPosition, currPosition64Low);\n    nextPosition = project_position(nextPosition, nextPosition64Low);\n\n    width = vec3(project_pixel_size(widthPixels), 0.0);\n    DECKGL_FILTER_SIZE(width, geometry);\n\n    vec4 pos = vec4(\n      lineJoin(prevPosition, currPosition, nextPosition, width.xy),\n      1.0);\n    geometry.position = pos;\n    gl_Position = project_common_position_to_clipspace(pos);\n  }\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n",fs:"#define SHADER_NAME path-layer-fragment-shader\n\nprecision highp float;\n\nuniform float miterLimit;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\n/*\n * vPathPosition represents the relative coordinates of the current fragment on the path segment.\n * vPathPosition.x - position along the width of the path, between [-1, 1]. 0 is the center line.\n * vPathPosition.y - position along the length of the path, between [0, L / width].\n */\nvarying vec2 vPathPosition;\nvarying float vPathLength;\nvarying float vJointType;\n\nvoid main(void) {\n  geometry.uv = vPathPosition;\n\n  if (vPathPosition.y < 0.0 || vPathPosition.y > vPathLength) {\n    // if joint is rounded, test distance from the corner\n    if (vJointType > 0.5 && length(vCornerOffset) > 1.0) {\n      discard;\n    }\n    // trim miter\n    if (vJointType < 0.5 && vMiterLength > miterLimit + 1.0) {\n      discard;\n    }\n  }\n  gl_FragColor = vColor;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n",modules:[r.Z,s.Z]})}get wrapLongitude(){return!1}initializeState(){this.getAttributeManager().addInstanced({positions:{size:3,vertexOffset:1,type:5130,fp64:this.use64bitPositions(),transition:v,accessor:"getPath",update:this.calculatePositions,noAlloc:true,shaderAttributes:{instanceLeftPositions:{vertexOffset:0},instanceStartPositions:{vertexOffset:1},instanceEndPositions:{vertexOffset:2},instanceRightPositions:{vertexOffset:3}}},instanceTypes:{size:1,type:5121,update:this.calculateSegmentTypes,noAlloc:true},instanceStrokeWidths:{size:1,accessor:"getWidth",transition:v,defaultValue:1},instanceColors:{size:this.props.colorFormat.length,type:5121,normalized:!0,accessor:"getColor",transition:v,defaultValue:m},instancePickingColors:{size:3,type:5121,accessor:(e,t)=>{let{index:n,target:o}=t;return this.encodePickingColor(e&&e.__source?e.__source.index:n,o)}}}),this.setState({pathTesselator:new g({fp64:this.use64bitPositions()})})}updateState(e){super.updateState(e);const{props:t,changeFlags:n}=e,o=this.getAttributeManager();if(n.dataChanged||n.updateTriggersChanged&&(n.updateTriggersChanged.all||n.updateTriggersChanged.getPath)){const{pathTesselator:e}=this.state,i=t.data.attributes||{};e.updateGeometry({data:t.data,geometryBuffer:i.getPath,buffers:i,normalize:!t._pathType,loop:"loop"===t._pathType,getGeometry:t.getPath,positionFormat:t.positionFormat,wrapLongitude:t.wrapLongitude,resolution:this.context.viewport.resolution,dataChanged:n.dataChanged}),this.setState({numInstances:e.instanceCount,startIndices:e.vertexStarts}),n.dataChanged||o.invalidateAll()}if(n.extensionsChanged){var i;const{gl:e}=this.context;null===(i=this.state.model)||void 0===i||i.delete(),this.state.model=this._getModel(e),o.invalidateAll()}}getPickingInfo(e){const t=super.getPickingInfo(e),{index:n}=t,{data:o}=this.props;return o[0]&&o[0].__source&&(t.object=o.find((e=>e.__source.index===n))),t}disablePickingIndex(e){const{data:t}=this.props;if(t[0]&&t[0].__source)for(let n=0;n<t.length;n++)t[n].__source.index===e&&this._disablePickingIndex(n);else this._disablePickingIndex(e)}draw(e){let{uniforms:t}=e;const{jointRounded:n,capRounded:o,billboard:i,miterLimit:r,widthUnits:s,widthScale:l,widthMinPixels:c,widthMaxPixels:d}=this.props;this.state.model.setUniforms(t).setUniforms({jointType:Number(n),capType:Number(o),billboard:i,widthUnits:a.iI[s],widthScale:l,miterLimit:r,widthMinPixels:c,widthMaxPixels:d}).draw()}_getModel(e){return new l.Z(e,{...this.getShaders(),id:this.props.id,geometry:new c.Z({drawMode:4,attributes:{indices:new Uint16Array([0,1,2,1,4,2,1,3,4,3,5,4]),positions:{value:new Float32Array([0,0,0,-1,0,1,1,-1,1,1,1,0]),size:2}}}),isInstanced:!0})}calculatePositions(e){const{pathTesselator:t}=this.state;e.startIndices=t.vertexStarts,e.value=t.get("positions")}calculateSegmentTypes(e){const{pathTesselator:t}=this.state;e.startIndices=t.vertexStarts,e.value=t.get("segmentTypes")}}(0,o.Z)(y,"defaultProps",f),(0,o.Z)(y,"layerName","PathLayer")},2151:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(74369),i=n(24806),r=n(59924);class s extends o.Component{render(){return(0,r.tZ)(i.Z,{viewBox:"0 0 12 12",...this.props,children:(0,r.tZ)("path",{d:"M10.595 0L6 4.596 1.405 0 0 1.404 4.596 6 0 10.595 1.405 12 6 7.404 10.595 12 12 10.595 7.404 6 12 1.404z"})})}}},24806:(e,t,n)=>{n.d(t,{Z:()=>r});var o=n("__fusion__95b4ba69e5"),i=n(59924);class r extends o.Component{render(){const{children:e,...t}=this.props;return e&&(0,i.tZ)("svg",{"aria-hidden":"true",fill:"currentColor",focusable:"false",height:"1em",width:"1em",...t,children:e})}}},31669:(e,t,n)=>{n.d(t,{Y:()=>fe});var o=n(74369),i=n(97121),r=n(19318),s=n(40349),a=n(25424),l=n(59924);function c(e){const[t,n]=(0,i.hQ)(),o={backgroundColor:n.colors.primary100,height:"100%",width:"100%",display:"flex",justifyContent:"center",alignItems:"center"};return(0,l.tZ)("div",{className:t(o),children:"Unexpected Map Error"})}const d=Object.freeze({googleMaps:"google-maps",mapboxGL:"mapbox-gl"});const u=n("__fusion__95b4ba69e5").createContext(!1),p=[{name:"mapbox-gl",tiles:"empty"}];var g=n(93688),h=n(1289),m=n(26251),f=n(56755);const v=e=>{let{viewport:t,overlays:n}=e;return t&&Array.isArray(n)?n.map(((e,n)=>(0,l.tZ)(f.ue,{viewport:t,zIndex:"auto",children:Array.isArray(e)?e.map(((e,t)=>{const{style:n,...o}=e.propsOverride||{};return(0,l.tZ)(f.RF,{coordinates:e.coordinates,style:{pointerEvents:"all",...n},...o,children:e.content},t)})):null},n))):null};var y=n(44935),P=n(59925);const w=Object.freeze({rides:"rides",eats:"eats",eatsPickup:"eats-pickup"}),b=Object.freeze({light:"light",dark:"dark"}),E="4bece55b6e256151",x="f65a5d0ebfc04ac2",S="231fad7e1dae4a0e",C="135d5c29af13ce20";const L={height:"100%",width:"100%"},_=e=>e+1,k=e=>e-1;function z(e){var t,n,r;const s=(0,o.useRef)(null),[a]=(0,i.hQ)(),[,c]=(0,o.useReducer)((e=>e+1),0),[d,u]=(0,o.useState)(null),[p,f]=(0,o.useState)(null),{viewState:z,onViewStateChange:A,layers:M,overlays:Z,onClick:O,onHover:I,onError:T,styleFlavor:R,overrides:B,theme:F}=e,N=(0,o.useMemo)((()=>(0,y.u)({onError:T})),[T]),G=(0,o.useMemo)((()=>(0,P.S)({onError:T})),[T]),j=(null==B||null===(t=B.options)||void 0===t?void 0:t.mapId)||function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:b.light;return e===w.eatsPickup?t===b.dark?C:S:t===b.dark?x:E}(R,F),K=(0,o.useMemo)((()=>({disableDefaultUI:!0,gestureHandling:A?"greedy":"none",isFractionalZoomEnabled:!0,clickableIcons:!1,mapId:j,...null==B?void 0:B.options})),[A,B,j]);(0,o.useEffect)((()=>{(async()=>{try{if(s.current&&!d){const e=new h.aN({apiKey:"AIzaSyA7PDtoek2wV38r1cF6_nyLGUujAx0myHg",version:"quarterly",...null==B?void 0:B.credentials}),t=new((await e.load()).maps.Map)(s.current,{...K,center:{lat:z.latitude,lng:z.longitude},zoom:_(z.zoom)});f(null),u(t)}}catch(e){G(e,z)}})()}),[G,d,K,null==B?void 0:B.credentials,z]),(0,o.useEffect)((()=>{d&&d.setOptions(K)}),[d,K]),(0,o.useEffect)((()=>{if(!d)return;const e={layers:M,onClick:O,onHover:I,onAfterRender:c,onError:(e,t)=>{const n=function(e){const t=e.getCenter(),n=e.getZoom();return t&&n?{longitude:t.lng(),latitude:t.lat(),zoom:k(n)}:null}(d);N(e,t,n)}};if(!p){const t=new m.Z(e);return t.setMap(d),void f(t)}p.setProps(e)}),[d,p,M,O,I,N]),(0,o.useEffect)((()=>{if(d){d.getZoom()!==_(z.zoom)&&d.setZoom(_(z.zoom));const e=d.getCenter();(null==e?void 0:e.lng())===z.longitude&&(null==e?void 0:e.lat())===z.latitude||d.setCenter({lat:z.latitude,lng:z.longitude})}}),[d,z.latitude,z.longitude,z.zoom]),(0,o.useEffect)((()=>{const e=d&&A?d.addListener("idle",(()=>{const e=d.getCenter(),t=d.getZoom();(e&&(e.lng()!==z.longitude||e.lat()!==z.latitude)||"number"==typeof t&&k(t)!==z.zoom)&&A({...z,latitude:e?e.lat():z.latitude,longitude:e?e.lng():z.longitude,zoom:"number"==typeof t?k(t):z.zoom})})):null;return()=>{e&&e.remove()}}),[d,z,A]);const V=null==p||null===(n=p._deck)||void 0===n||null===(n=n.layerManager)||void 0===n?void 0:n.context.viewport,D=null==d||null===(r=d.__gm)||void 0===r?void 0:r.eventCapturer;return(0,l.tZ)("div",{className:a(L),ref:s,children:D&&V?g.createPortal((0,l.tZ)(v,{viewport:V,overlays:Z}),D):null})}var A=n(95819),M=n(86386),Z=n(91129),O=n(69970);const I={version:8,sources:{},layers:[{id:"background-layer",type:"background",paint:{"background-color":"#EEEEEE"}}]};var T=n(71474);function R(e,t){(0,o.useEffect)((()=>{let t=null==e?void 0:e.getMap();t&&t.once("styledata",(e=>{!function(e,t,n){let o=function(e){return e?["string",["get","name_".concat(e)],["get","name"]," "]:["string",["get","name"]," "]}(e);for(let e of t.layers)e.layout&&"{name}"==e.layout["text-field"]&&n.setLayoutProperty(e.id,"text-field",o)}(function(){var e;return null===(e=navigator.language)||void 0===e?void 0:e.split("-")[0]}(),e.style.stylesheet,e.target)}))}),[e,t])}var B=n(39970),F=n(7941);function N(e){const{viewState:t,onViewStateChange:i,layers:r,overlays:s,onClick:a,onHover:c,onError:d,styleFlavor:u,tiles:p,overrides:g,theme:h}=e,[m,f]=(0,o.useState)(null),P=(0,o.useRef)();(0,o.useEffect)((()=>{P.current&&(P.current=t)}),[t]);!function(e,t,n){(0,o.useEffect)((()=>{if(!e)return;const o=e.getMap();if(o)o.on("idle",t);else if(n){const e=(0,T.j)();n({name:"mapbox-gl-error",payload:{message:String(e)}})}return()=>{o&&o.off("idle",t)}}),[e,t,n])}(m,(0,o.useCallback)((()=>{P.current&&i&&i(P.current)}),[i]),d);const E=(0,o.useMemo)((()=>(0,Z.I)({onError:d})),[d]),x=(0,o.useMemo)((()=>(0,y.u)({onError:d})),[d]),S=(null==g?void 0:g.mapStyle)||function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:b.light;return"tmap"===e?O.Kd:"empty"===e?I:[w.eats,w.eatsPickup].includes(t)?n===b.dark?O.A8:O.sY:n===b.dark?O.oW:O.br}(p,u,h);return R(m,p),(0,o.useEffect)((()=>{try{B.Z,(0,B.Z)((0,F.pZ)(n(7606)),null,!0)}catch(e){if("setRTLTextPlugin cannot be called multiple times."===e.message)return;throw e}}),[]),(0,l.BX)(M.Z,{style:{pointerEvents:i?"all":"none"},getCursor:e=>{let{isDragging:t}=e;return i?t?"grabbing":"grab":"default"},initialViewState:{bearing:0,pitch:0,position:[0,0,0],...t},onViewStateChange:e=>{let{viewState:t}=e;return P.current=t},controller:Boolean(i),layers:r,onClick:a,onHover:c,onError:(e,n)=>x(e,n,t),children:[(0,l.tZ)(A.Z,{ref:f,mapStyle:S,onError:e=>E(e,t)}),e=>{let{viewport:t}=e;return(0,l.tZ)(v,{viewport:t,overlays:s})}]})}var G=n(96474),j=n(9006),K=n("__fusion__9cb4ad6bd0"),V=n("__fusion__8672dec7d9"),D=n("__fusion__bbe38d643a");const H="18px";function J(e){let{icon:t}=e;return t?(0,l.tZ)(t,{size:H}):(0,l.tZ)(K.Z,{size:H})}function U(e){var t;const[n,o]=(0,i.hQ)(),{onClickLocateMe:r,onClickZoomIn:s,onClickZoomOut:a,isLoadingLocation:c,onViewStateChange:d,overrides:u}=e;if(!r&&!s&&!a)return null;const p={container:{position:"absolute",display:"grid",gridTemplateColumns:"1fr",gap:"8px",bottom:o.sizing.scale600,right:o.sizing.scale600},base:{backgroundColor:o.colors.backgroundPrimary,padding:0,height:"40px",width:"40px"},single:{boxShadow:o.lighting.shadow600},group:{display:"flex",flexDirection:"column",borderRadius:"8px",overflow:"hidden",boxShadow:o.lighting.shadow600},groupDivider:{height:"2px",background:o.colors.borderOpaque}};return(0,l.BX)("div",{className:n(p.container),children:[r&&(0,l.tZ)(G.Z,{disabled:!d,onClick:r,shape:j.X3.circle,kind:j.TO.tertiary,isLoading:c,type:"button",overrides:{BaseButton:{style:{...p.base,...p.single}}},name:"maps-sdk-map-controls-locate-me",children:(0,l.tZ)(J,{icon:null==u||null===(t=u.LocateMeButton)||void 0===t?void 0:t.icon})}),s&&a&&(0,l.BX)("div",{className:n(p.group),children:[(0,l.tZ)(G.Z,{disabled:!d,onClick:s,kind:j.TO.tertiary,type:"button",overrides:{BaseButton:{style:{...p.base,borderBottomLeftRadius:0,borderBottomRightRadius:0}}},name:"maps-sdk-map-controls-zoom-in",children:(0,l.tZ)(V.Z,{size:H})}),(0,l.tZ)("div",{className:n(p.groupDivider)}),(0,l.tZ)(G.Z,{disabled:!d,onClick:a,kind:j.TO.tertiary,type:"button",overrides:{BaseButton:{style:{...p.base,borderTopLeftRadius:0,borderTopRightRadius:0}}},name:"maps-sdk-map-controls-zoom-out",children:(0,l.tZ)(D.Z,{size:H})})]})]})}var W=n(44263);const Y={AZ:{type:"Feature",id:"AZE",properties:{name:"Azerbaijan"},geometry:{type:"MultiPolygon",coordinates:[[[[45.001987,39.740004],[45.298145,39.471751],[45.739978,39.473999],[45.735379,39.319719],[46.143623,38.741201],[45.457722,38.874139],[44.952688,39.335765],[44.79399,39.713003],[45.001987,39.740004]]],[[[47.373315,41.219732],[47.815666,41.151416],[47.987283,41.405819],[48.584353,41.80887],[49.110264,41.282287],[49.618915,40.572924],[50.08483,40.526157],[50.392821,40.256561],[49.569202,40.176101],[49.395259,39.399482],[49.223228,39.049219],[48.856532,38.815486],[48.883249,38.320245],[48.634375,38.270378],[48.010744,38.794015],[48.355529,39.288765],[48.060095,39.582235],[47.685079,39.508364],[46.50572,38.770605],[46.483499,39.464155],[46.034534,39.628021],[45.610012,39.899994],[45.891907,40.218476],[45.359175,40.561504],[45.560351,40.81229],[45.179496,40.985354],[44.97248,41.248129],[45.217426,41.411452],[45.962601,41.123873],[46.501637,41.064445],[46.637908,41.181673],[46.145432,41.722802],[46.404951,41.860675],[46.686071,41.827137],[47.373315,41.219732]]]]}},BD:{type:"Feature",id:"BGD",properties:{name:"Bangladesh"},geometry:{type:"Polygon",coordinates:[[[92.672721,22.041239],[92.652257,21.324048],[92.303234,21.475485],[92.368554,20.670883],[92.082886,21.192195],[92.025215,21.70157],[91.834891,22.182936],[91.417087,22.765019],[90.496006,22.805017],[90.586957,22.392794],[90.272971,21.836368],[89.847467,22.039146],[89.70205,21.857116],[89.418863,21.966179],[89.031961,22.055708],[88.876312,22.879146],[88.52977,23.631142],[88.69994,24.233715],[88.084422,24.501657],[88.306373,24.866079],[88.931554,25.238692],[88.209789,25.768066],[88.563049,26.446526],[89.355094,26.014407],[89.832481,25.965082],[89.920693,25.26975],[90.872211,25.132601],[91.799596,25.147432],[92.376202,24.976693],[91.915093,24.130414],[91.46773,24.072639],[91.158963,23.503527],[91.706475,22.985264],[91.869928,23.624346],[92.146035,23.627499],[92.672721,22.041239]]]}},BO:{type:"Feature",id:"BOL",properties:{name:"Bolivia"},geometry:{type:"Polygon",coordinates:[[[-62.846468,-22.034985],[-63.986838,-21.993644],[-64.377021,-22.798091],[-64.964892,-22.075862],[-66.273339,-21.83231],[-67.106674,-22.735925],[-67.82818,-22.872919],[-68.219913,-21.494347],[-68.757167,-20.372658],[-68.442225,-19.405068],[-68.966818,-18.981683],[-69.100247,-18.260125],[-69.590424,-17.580012],[-68.959635,-16.500698],[-69.389764,-15.660129],[-69.160347,-15.323974],[-69.339535,-14.953195],[-68.948887,-14.453639],[-68.929224,-13.602684],[-68.88008,-12.899729],[-68.66508,-12.5613],[-69.529678,-10.951734],[-68.786158,-11.03638],[-68.271254,-11.014521],[-68.048192,-10.712059],[-67.173801,-10.306812],[-66.646908,-9.931331],[-65.338435,-9.761988],[-65.444837,-10.511451],[-65.321899,-10.895872],[-65.402281,-11.56627],[-64.316353,-12.461978],[-63.196499,-12.627033],[-62.80306,-13.000653],[-62.127081,-13.198781],[-61.713204,-13.489202],[-61.084121,-13.479384],[-60.503304,-13.775955],[-60.459198,-14.354007],[-60.264326,-14.645979],[-60.251149,-15.077219],[-60.542966,-15.09391],[-60.15839,-16.258284],[-58.24122,-16.299573],[-58.388058,-16.877109],[-58.280804,-17.27171],[-57.734558,-17.552468],[-57.498371,-18.174188],[-57.676009,-18.96184],[-57.949997,-19.400004],[-57.853802,-19.969995],[-58.166392,-20.176701],[-58.183471,-19.868399],[-59.115042,-19.356906],[-60.043565,-19.342747],[-61.786326,-19.633737],[-62.265961,-20.513735],[-62.291179,-21.051635],[-62.685057,-22.249029],[-62.846468,-22.034985]]]}},BY:{type:"Feature",id:"BLR",properties:{name:"Belarus"},geometry:{type:"Polygon",coordinates:[[[23.484128,53.912498],[24.450684,53.905702],[25.536354,54.282423],[25.768433,54.846963],[26.588279,55.167176],[26.494331,55.615107],[27.10246,55.783314],[28.176709,56.16913],[29.229513,55.918344],[29.371572,55.670091],[29.896294,55.789463],[30.873909,55.550976],[30.971836,55.081548],[30.757534,54.811771],[31.384472,54.157056],[31.791424,53.974639],[31.731273,53.794029],[32.405599,53.618045],[32.693643,53.351421],[32.304519,53.132726],[31.497644,53.167427],[31.305201,53.073996],[31.540018,52.742052],[31.785998,52.101678],[30.927549,52.042353],[30.619454,51.822806],[30.555117,51.319503],[30.157364,51.416138],[29.254938,51.368234],[28.992835,51.602044],[28.617613,51.427714],[28.241615,51.572227],[27.454066,51.592303],[26.337959,51.832289],[25.327788,51.910656],[24.553106,51.888461],[24.005078,51.617444],[23.527071,51.578454],[23.508002,52.023647],[23.199494,52.486977],[23.799199,52.691099],[23.804935,53.089731],[23.527536,53.470122],[23.484128,53.912498]]]}},CN:{type:"Feature",id:"CHN",properties:{name:"China"},geometry:{type:"MultiPolygon",coordinates:[[[[110.339188,18.678395],[109.47521,18.197701],[108.655208,18.507682],[108.626217,19.367888],[109.119056,19.821039],[110.211599,20.101254],[110.786551,20.077534],[111.010051,19.69593],[110.570647,19.255879],[110.339188,18.678395]]],[[[127.657407,49.76027],[129.397818,49.4406],[130.582293,48.729687],[130.987282,47.790132],[132.506672,47.78897],[133.373596,48.183442],[135.026311,48.47823],[134.500814,47.57844],[134.112362,47.212467],[133.769644,46.116927],[133.097127,45.144066],[131.883454,45.321162],[131.025212,44.967953],[131.288555,44.11152],[131.144688,42.92999],[130.633866,42.903015],[130.640016,42.395009],[129.994267,42.985387],[129.596669,42.424982],[128.052215,41.994285],[128.208433,41.466772],[127.343783,41.503152],[126.869083,41.816569],[126.182045,41.107336],[125.079942,40.569824],[124.265625,39.928493],[122.86757,39.637788],[122.131388,39.170452],[121.054554,38.897471],[121.585995,39.360854],[121.376757,39.750261],[122.168595,40.422443],[121.640359,40.94639],[120.768629,40.593388],[119.639602,39.898056],[119.023464,39.252333],[118.042749,39.204274],[117.532702,38.737636],[118.059699,38.061476],[118.87815,37.897325],[118.911636,37.448464],[119.702802,37.156389],[120.823457,37.870428],[121.711259,37.481123],[122.357937,37.454484],[122.519995,36.930614],[121.104164,36.651329],[120.637009,36.11144],[119.664562,35.609791],[119.151208,34.909859],[120.227525,34.360332],[120.620369,33.376723],[121.229014,32.460319],[121.908146,31.692174],[121.891919,30.949352],[121.264257,30.676267],[121.503519,30.142915],[122.092114,29.83252],[121.938428,29.018022],[121.684439,28.225513],[121.125661,28.135673],[120.395473,27.053207],[119.585497,25.740781],[118.656871,24.547391],[117.281606,23.624501],[115.890735,22.782873],[114.763827,22.668074],[114.152547,22.22376],[113.80678,22.54834],[113.241078,22.051367],[111.843592,21.550494],[110.785466,21.397144],[110.444039,20.341033],[109.889861,20.282457],[109.627655,21.008227],[109.864488,21.395051],[108.522813,21.715212],[108.05018,21.55238],[107.04342,21.811899],[106.567273,22.218205],[106.725403,22.794268],[105.811247,22.976892],[105.329209,23.352063],[104.476858,22.81915],[103.504515,22.703757],[102.706992,22.708795],[102.170436,22.464753],[101.652018,22.318199],[101.80312,21.174367],[101.270026,21.201652],[101.180005,21.436573],[101.150033,21.849984],[100.416538,21.558839],[99.983489,21.742937],[99.240899,22.118314],[99.531992,22.949039],[98.898749,23.142722],[98.660262,24.063286],[97.60472,23.897405],[97.724609,25.083637],[98.671838,25.918703],[98.712094,26.743536],[98.68269,27.508812],[98.246231,27.747221],[97.911988,28.335945],[97.327114,28.261583],[96.248833,28.411031],[96.586591,28.83098],[96.117679,29.452802],[95.404802,29.031717],[94.56599,29.277438],[93.413348,28.640629],[92.503119,27.896876],[91.696657,27.771742],[91.258854,28.040614],[90.730514,28.064954],[90.015829,28.296439],[89.47581,28.042759],[88.814248,27.299316],[88.730326,28.086865],[88.120441,27.876542],[86.954517,27.974262],[85.82332,28.203576],[85.011638,28.642774],[84.23458,28.839894],[83.898993,29.320226],[83.337115,29.463732],[82.327513,30.115268],[81.525804,30.422717],[81.111256,30.183481],[79.721367,30.882715],[78.738894,31.515906],[78.458446,32.618164],[79.176129,32.48378],[79.208892,32.994395],[78.811086,33.506198],[78.912269,34.321936],[77.837451,35.49401],[76.192848,35.898403],[75.896897,36.666806],[75.158028,37.133031],[74.980002,37.41999],[74.829986,37.990007],[74.864816,38.378846],[74.257514,38.606507],[73.928852,38.505815],[73.675379,39.431237],[73.960013,39.660008],[73.822244,39.893973],[74.776862,40.366425],[75.467828,40.562072],[76.526368,40.427946],[76.904484,41.066486],[78.187197,41.185316],[78.543661,41.582243],[80.11943,42.123941],[80.25999,42.349999],[80.18015,42.920068],[80.866206,43.180362],[79.966106,44.917517],[81.947071,45.317027],[82.458926,45.53965],[83.180484,47.330031],[85.16429,47.000956],[85.720484,47.452969],[85.768233,48.455751],[86.598776,48.549182],[87.35997,49.214981],[87.751264,49.297198],[88.013832,48.599463],[88.854298,48.069082],[90.280826,47.693549],[90.970809,46.888146],[90.585768,45.719716],[90.94554,45.286073],[92.133891,45.115076],[93.480734,44.975472],[94.688929,44.352332],[95.306875,44.241331],[95.762455,43.319449],[96.349396,42.725635],[97.451757,42.74889],[99.515817,42.524691],[100.845866,42.663804],[101.83304,42.514873],[103.312278,41.907468],[104.522282,41.908347],[104.964994,41.59741],[106.129316,42.134328],[107.744773,42.481516],[109.243596,42.519446],[110.412103,42.871234],[111.129682,43.406834],[111.829588,43.743118],[111.667737,44.073176],[111.348377,44.457442],[111.873306,45.102079],[112.436062,45.011646],[113.463907,44.808893],[114.460332,45.339817],[115.985096,45.727235],[116.717868,46.388202],[117.421701,46.672733],[118.874326,46.805412],[119.66327,46.69268],[119.772824,47.048059],[118.866574,47.74706],[118.064143,48.06673],[117.295507,47.697709],[116.308953,47.85341],[115.742837,47.726545],[115.485282,48.135383],[116.191802,49.134598],[116.678801,49.888531],[117.879244,49.510983],[119.288461,50.142883],[119.279366,50.582908],[120.18205,51.643566],[120.738191,51.964115],[120.725789,52.516226],[120.177089,52.753886],[121.003085,53.251401],[122.245748,53.431726],[123.571507,53.458804],[125.068211,53.161045],[125.946349,52.792799],[126.564399,51.784255],[126.939157,51.353894],[127.287456,50.739797],[127.657407,49.76027]]]]}},EC:{type:"Feature",id:"ECU",properties:{name:"Ecuador"},geometry:{type:"Polygon",coordinates:[[[-80.302561,-3.404856],[-79.770293,-2.657512],[-79.986559,-2.220794],[-80.368784,-2.685159],[-80.967765,-2.246943],[-80.764806,-1.965048],[-80.933659,-1.057455],[-80.58337,-.906663],[-80.399325,-.283703],[-80.020898,.36034],[-80.09061,.768429],[-79.542762,.982938],[-78.855259,1.380924],[-77.855061,.809925],[-77.668613,.825893],[-77.424984,.395687],[-76.57638,.256936],[-76.292314,.416047],[-75.801466,.084801],[-75.373223,-.152032],[-75.233723,-.911417],[-75.544996,-1.56161],[-76.635394,-2.608678],[-77.837905,-3.003021],[-78.450684,-3.873097],[-78.639897,-4.547784],[-79.205289,-4.959129],[-79.624979,-4.454198],[-80.028908,-4.346091],[-80.442242,-4.425724],[-80.469295,-4.059287],[-80.184015,-3.821162],[-80.302561,-3.404856]]]}},IL:{type:"Feature",id:"ISR",properties:{name:"Israel"},geometry:{type:"Polygon",coordinates:[[[35.719918,32.709192],[35.545665,32.393992],[35.18393,32.532511],[34.974641,31.866582],[35.225892,31.754341],[34.970507,31.616778],[34.927408,31.353435],[35.397561,31.489086],[35.420918,31.100066],[34.922603,29.501326],[34.265433,31.219361],[34.556372,31.548824],[34.488107,31.605539],[34.752587,32.072926],[34.955417,32.827376],[35.098457,33.080539],[35.126053,33.0909],[35.460709,33.08904],[35.552797,33.264275],[35.821101,33.277426],[35.836397,32.868123],[35.700798,32.716014],[35.719918,32.709192]]]}},IN:{type:"Feature",id:"IND",properties:{name:"India"},geometry:{type:"Polygon",coordinates:[[[77.837451,35.49401],[78.912269,34.321936],[78.811086,33.506198],[79.208892,32.994395],[79.176129,32.48378],[78.458446,32.618164],[78.738894,31.515906],[79.721367,30.882715],[81.111256,30.183481],[80.476721,29.729865],[80.088425,28.79447],[81.057203,28.416095],[81.999987,27.925479],[83.304249,27.364506],[84.675018,27.234901],[85.251779,26.726198],[86.024393,26.630985],[87.227472,26.397898],[88.060238,26.414615],[88.174804,26.810405],[88.043133,27.445819],[88.120441,27.876542],[88.730326,28.086865],[88.814248,27.299316],[88.835643,27.098966],[89.744528,26.719403],[90.373275,26.875724],[91.217513,26.808648],[92.033484,26.83831],[92.103712,27.452614],[91.696657,27.771742],[92.503119,27.896876],[93.413348,28.640629],[94.56599,29.277438],[95.404802,29.031717],[96.117679,29.452802],[96.586591,28.83098],[96.248833,28.411031],[97.327114,28.261583],[97.402561,27.882536],[97.051989,27.699059],[97.133999,27.083774],[96.419366,27.264589],[95.124768,26.573572],[95.155153,26.001307],[94.603249,25.162495],[94.552658,24.675238],[94.106742,23.850741],[93.325188,24.078556],[93.286327,23.043658],[93.060294,22.703111],[93.166128,22.27846],[92.672721,22.041239],[92.146035,23.627499],[91.869928,23.624346],[91.706475,22.985264],[91.158963,23.503527],[91.46773,24.072639],[91.915093,24.130414],[92.376202,24.976693],[91.799596,25.147432],[90.872211,25.132601],[89.920693,25.26975],[89.832481,25.965082],[89.355094,26.014407],[88.563049,26.446526],[88.209789,25.768066],[88.931554,25.238692],[88.306373,24.866079],[88.084422,24.501657],[88.69994,24.233715],[88.52977,23.631142],[88.876312,22.879146],[89.031961,22.055708],[88.888766,21.690588],[88.208497,21.703172],[86.975704,21.495562],[87.033169,20.743308],[86.499351,20.151638],[85.060266,19.478579],[83.941006,18.30201],[83.189217,17.671221],[82.192792,17.016636],[82.191242,16.556664],[81.692719,16.310219],[80.791999,15.951972],[80.324896,15.899185],[80.025069,15.136415],[80.233274,13.835771],[80.286294,13.006261],[79.862547,12.056215],[79.857999,10.357275],[79.340512,10.308854],[78.885345,9.546136],[79.18972,9.216544],[78.277941,8.933047],[77.941165,8.252959],[77.539898,7.965535],[76.592979,8.899276],[76.130061,10.29963],[75.746467,11.308251],[75.396101,11.781245],[74.864816,12.741936],[74.616717,13.992583],[74.443859,14.617222],[73.534199,15.990652],[73.119909,17.92857],[72.820909,19.208234],[72.824475,20.419503],[72.630533,21.356009],[71.175273,20.757441],[70.470459,20.877331],[69.16413,22.089298],[69.644928,22.450775],[69.349597,22.84318],[68.176645,23.691965],[68.842599,24.359134],[71.04324,24.356524],[70.844699,25.215102],[70.282873,25.722229],[70.168927,26.491872],[69.514393,26.940966],[70.616496,27.989196],[71.777666,27.91318],[72.823752,28.961592],[73.450638,29.976413],[74.42138,30.979815],[74.405929,31.692639],[75.258642,32.271105],[74.451559,32.7649],[74.104294,33.441473],[73.749948,34.317699],[74.240203,34.748887],[75.757061,34.504923],[76.871722,34.653544],[77.837451,35.49401]]]}},JP:{type:"Feature",id:"JPN",properties:{name:"Japan"},geometry:{type:"MultiPolygon",coordinates:[[[[134.638428,34.149234],[134.766379,33.806335],[134.203416,33.201178],[133.79295,33.521985],[133.280268,33.28957],[133.014858,32.704567],[132.363115,32.989382],[132.371176,33.463642],[132.924373,34.060299],[133.492968,33.944621],[133.904106,34.364931],[134.638428,34.149234]]],[[[140.976388,37.142074],[140.59977,36.343983],[140.774074,35.842877],[140.253279,35.138114],[138.975528,34.6676],[137.217599,34.606286],[135.792983,33.464805],[135.120983,33.849071],[135.079435,34.596545],[133.340316,34.375938],[132.156771,33.904933],[130.986145,33.885761],[132.000036,33.149992],[131.33279,31.450355],[130.686318,31.029579],[130.20242,31.418238],[130.447676,32.319475],[129.814692,32.61031],[129.408463,33.296056],[130.353935,33.604151],[130.878451,34.232743],[131.884229,34.749714],[132.617673,35.433393],[134.608301,35.731618],[135.677538,35.527134],[136.723831,37.304984],[137.390612,36.827391],[138.857602,37.827485],[139.426405,38.215962],[140.05479,39.438807],[139.883379,40.563312],[140.305783,41.195005],[141.368973,41.37856],[141.914263,39.991616],[141.884601,39.180865],[140.959489,38.174001],[140.976388,37.142074]]],[[[143.910162,44.1741],[144.613427,43.960883],[145.320825,44.384733],[145.543137,43.262088],[144.059662,42.988358],[143.18385,41.995215],[141.611491,42.678791],[141.067286,41.584594],[139.955106,41.569556],[139.817544,42.563759],[140.312087,43.333273],[141.380549,43.388825],[141.671952,44.772125],[141.967645,45.551483],[143.14287,44.510358],[143.910162,44.1741]]]]}},KH:{type:"Feature",id:"KHM",properties:{name:"Cambodia"},geometry:{type:"Polygon",coordinates:[[[103.49728,10.632555],[103.09069,11.153661],[102.584932,12.186595],[102.348099,13.394247],[102.988422,14.225721],[104.281418,14.416743],[105.218777,14.273212],[106.043946,13.881091],[106.496373,14.570584],[107.382727,14.202441],[107.614548,13.535531],[107.491403,12.337206],[105.810524,11.567615],[106.24967,10.961812],[105.199915,10.88931],[104.334335,10.486544],[103.49728,10.632555]]]}},KP:{type:"Feature",id:"PRK",properties:{name:"North Korea"},geometry:{type:"Polygon",coordinates:[[[130.640016,42.395009],[130.780007,42.220007],[130.400031,42.280004],[129.965949,41.941368],[129.667362,41.601104],[129.705189,40.882828],[129.188115,40.661808],[129.0104,40.485436],[128.633368,40.189847],[127.967414,40.025413],[127.533436,39.75685],[127.50212,39.323931],[127.385434,39.213472],[127.783343,39.050898],[128.349716,38.612243],[128.205746,38.370397],[127.780035,38.304536],[127.073309,38.256115],[126.68372,37.804773],[126.237339,37.840378],[126.174759,37.749686],[125.689104,37.94001],[125.568439,37.752089],[125.27533,37.669071],[125.240087,37.857224],[124.981033,37.948821],[124.712161,38.108346],[124.985994,38.548474],[125.221949,38.665857],[125.132859,38.848559],[125.38659,39.387958],[125.321116,39.551385],[124.737482,39.660344],[124.265625,39.928493],[125.079942,40.569824],[126.182045,41.107336],[126.869083,41.816569],[127.343783,41.503152],[128.208433,41.466772],[128.052215,41.994285],[129.596669,42.424982],[129.994267,42.985387],[130.640016,42.395009]]]}},KR:{type:"Feature",id:"KOR",properties:{name:"South Korea"},geometry:{type:"Polygon",coordinates:[[[128.349716,38.612243],[129.21292,37.432392],[129.46045,36.784189],[129.468304,35.632141],[129.091377,35.082484],[128.18585,34.890377],[127.386519,34.475674],[126.485748,34.390046],[126.37392,34.93456],[126.559231,35.684541],[126.117398,36.725485],[126.860143,36.893924],[126.174759,37.749686],[126.237339,37.840378],[126.68372,37.804773],[127.073309,38.256115],[127.780035,38.304536],[128.205746,38.370397],[128.349716,38.612243]]]}},KZ:{type:"Feature",id:"KAZ",properties:{name:"Kazakhstan"},geometry:{type:"Polygon",coordinates:[[[70.962315,42.266154],[70.388965,42.081308],[69.070027,41.384244],[68.632483,40.668681],[68.259896,40.662325],[67.985856,41.135991],[66.714047,41.168444],[66.510649,41.987644],[66.023392,41.994646],[66.098012,42.99766],[64.900824,43.728081],[63.185787,43.650075],[62.0133,43.504477],[61.05832,44.405817],[60.239972,44.784037],[58.689989,45.500014],[58.503127,45.586804],[55.928917,44.995858],[55.968191,41.308642],[55.455251,41.259859],[54.755345,42.043971],[54.079418,42.324109],[52.944293,42.116034],[52.50246,41.783316],[52.446339,42.027151],[52.692112,42.443895],[52.501426,42.792298],[51.342427,43.132975],[50.891292,44.031034],[50.339129,44.284016],[50.305643,44.609836],[51.278503,44.514854],[51.316899,45.245998],[52.16739,45.408391],[53.040876,45.259047],[53.220866,46.234646],[53.042737,46.853006],[52.042023,46.804637],[51.191945,47.048705],[50.034083,46.60899],[49.10116,46.39933],[48.593241,46.561034],[48.694734,47.075628],[48.057253,47.743753],[47.315231,47.715847],[46.466446,48.394152],[47.043672,49.152039],[46.751596,49.356006],[47.54948,50.454698],[48.577841,49.87476],[48.702382,50.605128],[50.766648,51.692762],[52.328724,51.718652],[54.532878,51.02624],[55.716941,50.621717],[56.777961,51.043551],[58.363291,51.063653],[59.642282,50.545442],[59.932807,50.842194],[61.337424,50.79907],[61.588003,51.272659],[59.967534,51.96042],[60.927269,52.447548],[60.739993,52.719986],[61.699986,52.979996],[60.978066,53.664993],[61.436591,54.006265],[65.178534,54.354228],[65.666876,54.601267],[68.1691,54.970392],[69.068167,55.38525],[70.865267,55.169734],[71.180131,54.133285],[72.22415,54.376655],[73.508516,54.035617],[73.425679,53.48981],[74.384845,53.546861],[76.8911,54.490524],[76.525179,54.177003],[77.800916,53.404415],[80.03556,50.864751],[80.568447,51.388336],[81.945986,50.812196],[83.383004,51.069183],[83.935115,50.889246],[84.416377,50.3114],[85.11556,50.117303],[85.54127,49.692859],[86.829357,49.826675],[87.35997,49.214981],[86.598776,48.549182],[85.768233,48.455751],[85.720484,47.452969],[85.16429,47.000956],[83.180484,47.330031],[82.458926,45.53965],[81.947071,45.317027],[79.966106,44.917517],[80.866206,43.180362],[80.18015,42.920068],[80.25999,42.349999],[79.643645,42.496683],[79.142177,42.856092],[77.658392,42.960686],[76.000354,42.988022],[75.636965,42.8779],[74.212866,43.298339],[73.645304,43.091272],[73.489758,42.500894],[71.844638,42.845395],[71.186281,42.704293],[70.962315,42.266154]]]}},LK:{type:"Feature",id:"LKA",properties:{name:"Sri Lanka"},geometry:{type:"Polygon",coordinates:[[[81.787959,7.523055],[81.637322,6.481775],[81.21802,6.197141],[80.348357,5.96837],[79.872469,6.763463],[79.695167,8.200843],[80.147801,9.824078],[80.838818,9.268427],[81.304319,8.564206],[81.787959,7.523055]]]}},MM:{type:"Feature",id:"MMR",properties:{name:"Myanmar"},geometry:{type:"Polygon",coordinates:[[[99.543309,20.186598],[98.959676,19.752981],[98.253724,19.708203],[97.797783,18.62708],[97.375896,18.445438],[97.859123,17.567946],[98.493761,16.837836],[98.903348,16.177824],[98.537376,15.308497],[98.192074,15.123703],[98.430819,14.622028],[99.097755,13.827503],[99.212012,13.269294],[99.196354,12.804748],[99.587286,11.892763],[99.038121,10.960546],[98.553551,9.93296],[98.457174,10.675266],[98.764546,11.441292],[98.428339,12.032987],[98.509574,13.122378],[98.103604,13.64046],[97.777732,14.837286],[97.597072,16.100568],[97.16454,16.928734],[96.505769,16.427241],[95.369352,15.71439],[94.808405,15.803454],[94.188804,16.037936],[94.533486,17.27724],[94.324817,18.213514],[93.540988,19.366493],[93.663255,19.726962],[93.078278,19.855145],[92.368554,20.670883],[92.303234,21.475485],[92.652257,21.324048],[92.672721,22.041239],[93.166128,22.27846],[93.060294,22.703111],[93.286327,23.043658],[93.325188,24.078556],[94.106742,23.850741],[94.552658,24.675238],[94.603249,25.162495],[95.155153,26.001307],[95.124768,26.573572],[96.419366,27.264589],[97.133999,27.083774],[97.051989,27.699059],[97.402561,27.882536],[97.327114,28.261583],[97.911988,28.335945],[98.246231,27.747221],[98.68269,27.508812],[98.712094,26.743536],[98.671838,25.918703],[97.724609,25.083637],[97.60472,23.897405],[98.660262,24.063286],[98.898749,23.142722],[99.531992,22.949039],[99.240899,22.118314],[99.983489,21.742937],[100.416538,21.558839],[101.150033,21.849984],[101.180005,21.436573],[100.329101,20.786122],[100.115988,20.41785],[99.543309,20.186598]]]}},PK:{type:"Feature",id:"PAK",properties:{name:"Pakistan"},geometry:{type:"Polygon",coordinates:[[[75.158028,37.133031],[75.896897,36.666806],[76.192848,35.898403],[77.837451,35.49401],[76.871722,34.653544],[75.757061,34.504923],[74.240203,34.748887],[73.749948,34.317699],[74.104294,33.441473],[74.451559,32.7649],[75.258642,32.271105],[74.405929,31.692639],[74.42138,30.979815],[73.450638,29.976413],[72.823752,28.961592],[71.777666,27.91318],[70.616496,27.989196],[69.514393,26.940966],[70.168927,26.491872],[70.282873,25.722229],[70.844699,25.215102],[71.04324,24.356524],[68.842599,24.359134],[68.176645,23.691965],[67.443667,23.944844],[67.145442,24.663611],[66.372828,25.425141],[64.530408,25.237039],[62.905701,25.218409],[61.497363,25.078237],[61.874187,26.239975],[63.316632,26.756532],[63.233898,27.217047],[62.755426,27.378923],[62.72783,28.259645],[61.771868,28.699334],[61.369309,29.303276],[60.874248,29.829239],[62.549857,29.318572],[63.550261,29.468331],[64.148002,29.340819],[64.350419,29.560031],[65.046862,29.472181],[66.346473,29.887943],[66.381458,30.738899],[66.938891,31.304911],[67.683394,31.303154],[67.792689,31.58293],[68.556932,31.71331],[68.926677,31.620189],[69.317764,31.901412],[69.262522,32.501944],[69.687147,33.105499],[70.323594,33.358533],[69.930543,34.02012],[70.881803,33.988856],[71.156773,34.348911],[71.115019,34.733126],[71.613076,35.153203],[71.498768,35.650563],[71.262348,36.074388],[71.846292,36.509942],[72.920025,36.720007],[74.067552,36.836176],[74.575893,37.020841],[75.158028,37.133031]]]}},TR:{type:"Feature",id:"TUR",properties:{name:"Turkey"},geometry:{type:"MultiPolygon",coordinates:[[[[36.913127,41.335358],[38.347665,40.948586],[39.512607,41.102763],[40.373433,41.013673],[41.554084,41.535656],[42.619549,41.583173],[43.582746,41.092143],[43.752658,40.740201],[43.656436,40.253564],[44.400009,40.005],[44.79399,39.713003],[44.109225,39.428136],[44.421403,38.281281],[44.225756,37.971584],[44.772699,37.170445],[44.293452,37.001514],[43.942259,37.256228],[42.779126,37.385264],[42.349591,37.229873],[41.212089,37.074352],[40.673259,37.091276],[39.52258,36.716054],[38.699891,36.712927],[38.167727,36.90121],[37.066761,36.623036],[36.739494,36.81752],[36.685389,36.259699],[36.41755,36.040617],[36.149763,35.821535],[35.782085,36.274995],[36.160822,36.650606],[35.550936,36.565443],[34.714553,36.795532],[34.026895,36.21996],[32.509158,36.107564],[31.699595,36.644275],[30.621625,36.677865],[30.391096,36.262981],[29.699976,36.144357],[28.732903,36.676831],[27.641187,36.658822],[27.048768,37.653361],[26.318218,38.208133],[26.8047,38.98576],[26.170785,39.463612],[27.28002,40.420014],[28.819978,40.460011],[29.240004,41.219991],[31.145934,41.087622],[32.347979,41.736264],[33.513283,42.01896],[35.167704,42.040225],[36.913127,41.335358]]],[[[27.192377,40.690566],[26.358009,40.151994],[26.043351,40.617754],[26.056942,40.824123],[26.294602,40.936261],[26.604196,41.562115],[26.117042,41.826905],[27.135739,42.141485],[27.99672,42.007359],[28.115525,41.622886],[28.988443,41.299934],[28.806438,41.054962],[27.619017,40.999823],[27.192377,40.690566]]]]}}},X=[{name:"google-maps"},{name:"mapbox-gl",tiles:"tomtom"}],Q=[{name:"google-maps"}],q={CN:Q,KZ:Q,TR:Q,MM:Q,JP:Q,PK:Q,EC:Q,BO:Q,IN:Q,KP:Q,KH:Q,KR:[{name:"google-maps"},{name:"mapbox-gl",tiles:"tmap"}],LK:Q,BY:Q,BD:Q,AZ:Q,IL:Q};const $=Object.freeze({google:"google",uber:"uber",tomtom:"tomtom",tmap:"tmap",here:"here",unknown:"unknown"});function ee(e,t,n,o,i){const r=function(e,t){const n=new Set;return e&&e.forEach((e=>{const{data:t,getProvider:o}=e.props;t.forEach(((e,t)=>{const i=o(e,{index:t});n.add(i)}))})),t&&t.forEach((e=>{e.forEach((e=>{n.add(e.provider)}))})),[...n]}(n,o).map((n=>(e[n]||(e[n]=function(e,t,n){return"string"!=typeof e?(n&&n({name:"normalize-provider-error",payload:{message:"received an invalid provider",provider:String(e)}}),t):e.toLowerCase().includes($.google)?$.google:e.toLowerCase().includes($.uber)?$.uber:e.toLowerCase().includes($.tomtom)?$.tomtom:e.toLowerCase().includes($.tmap)?$.tmap:e.toLowerCase().includes($.here)?$.here:(n&&n({name:"normalize-provider-error",payload:{message:"received an unknown provider",provider:e}}),t)}(n,t,i)),e[n])));return Array.from(new Set(r))}var te=n(64083);const ne=(e,t)=>{const n=e[0]/(e[0]+e[1]),o=e[1]/(e[0]+e[1]),i=e[0]+e[1]-t+2;return[Math.ceil(i*n),Math.ceil(i*o)]};var oe=n(99612),ie=n(75929),re=n(22891),se=n(88615);function ae(e){const{isMapboxGLEngine:t,sessionId:n,onError:o,whyEngine:i,tripId:r,workflowId:s}=e;return n===oe.bw?null:(0,l.tZ)(le,{isMapboxGLEngine:t,sessionId:n,tripId:r,workflowId:s,onError:o,whyEngine:i})}function le(e){let{isMapboxGLEngine:t,sessionId:n,onError:i,whyEngine:r,tripId:s,workflowId:a}=e;const l=(0,re.G2)(se.$8);return(0,o.useEffect)((()=>{n||i({name:"report-provenance-error",payload:{message:'Session Id is missing: "'.concat(String(n),'"')}})}),[i,n]),(0,o.useEffect)((()=>{if(!n||n===oe.bw)return;const e=t?[ie.Y.PROVENANCE_UBER_PLACES]:[ie.Y.PROVENANCE_GOOGLE_PLACES];l(oe.u9,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({sessionId:n,provenances:e,whyEngine:r,tripId:s,workflowId:a})}).catch((e=>{i({name:"report-provenance-error",payload:{message:e.message,stack:e.stack}})}))}),[n,t,r]),null}var ce=n(72881);const de=$.google;const ue={position:"relative",zIndex:0,height:"100%",width:"100%",overflow:"hidden"};const pe={transitionDuration:300,transitionEasing:e=>Math.sin(e*Math.PI/2),transitionInterpolator:new r.Z};function ge(e,t){const{layers:n,overlays:r,sessionId:a,tripId:c,workflowId:g,viewState:h,onViewStateChange:m,onClick:f,onHover:v,onError:y,styleFlavor:P=w.rides,isLoadingLocation:E,onClickLocateMe:x,showZoomButtons:S,overrides:C,style:L,theme:_=b.light}=e,[k]=(0,i.hQ)();(0,o.useEffect)((()=>{y&&0===(null==h?void 0:h.longitude)&&0===(null==h?void 0:h.latitude)&&y({name:"maps-sdk-invalid-viewstate",payload:{message:"Use viewState=null instead of lat=0, lng=0 if the location is not yet available (to avoid using google-maps engine)"}})}),[y,null==h?void 0:h.longitude,null==h?void 0:h.latitude]);const A=(0,o.useContext)(u),{availableEngines:M,whyEngine:Z}=(0,o.useMemo)((()=>function(e){if(!e)return{availableEngines:[],whyEngine:"NO_VIEW_STATE"};if(e.zoom<6)return{availableEngines:X,whyEngine:"BELOW_ZOOM_THRESHOLD"};const t=Object.keys(q).find((t=>(0,W.Z)([e.longitude,e.latitude],Y[t].geometry)));return t?{availableEngines:q[t],whyEngine:"COUNTRY_EXCEPTION"}:{availableEngines:X,whyEngine:"ROLLED_OUT_AREA"}}(h)),[h]),O=(0,o.useRef)({}),I=((0,o.useContext)(re.GM),function(e){{var t;const e=null===(t=document.getElementById("maps-fallback"))||void 0===t?void 0:t.content;var n;if(e)return null!==(n=(0,ce.AK)(e))&&void 0!==n?n:de}return de}()),T=function(e){for(const t of e)if(t.name===d.mapboxGL)return t;return null}(function(e,t,n){return n?p:t.some((e=>$.google==e))?Q:e}(M,ee(O.current,I,n,r,y),A)),R=(0,o.useCallback)((()=>{h&&m&&m({...h,...pe,zoom:h.zoom<22?h.zoom+1:22})}),[h,m]),B=(0,o.useCallback)((()=>{h&&m&&m({...h,...pe,zoom:h.zoom>0?h.zoom-1:0})}),[h,m]),F=(0,o.useRef)(null);return(0,o.useImperativeHandle)(t,(()=>({getBoundingClientRect:()=>F.current?F.current.getBoundingClientRect():null,getViewStateForFeatures:(e,t,n)=>{if(!F.current||0===e.length)return h;const{width:o,height:i}=F.current.getBoundingClientRect();try{const r=((e,t,n,o,i)=>{if(1===e.length){const{latitude:n,longitude:i}=t(e[0]);return{latitude:n,longitude:i,zoom:o?o.zoom:16}}const{width:r,height:s}=i;let a=null;if("number"==typeof n.padding?a={left:n.padding,right:n.padding,top:n.padding,bottom:n.padding}:"object"==typeof n.padding&&(a=n.padding),a){const{left:e,right:t,top:o,bottom:i}=a;if(e+t>=r)if(n.tryFitPadding){const[n,o]=ne([e,t],r);a={...a,left:Math.max(0,e-n),right:Math.max(0,t-o)}}else a={...a,left:0,right:0};if(o+i>=s)if(n.tryFitPadding){const[e,t]=ne([o,i],s);a={...a,top:Math.max(0,o-e),bottom:Math.max(0,i-t)}}else a={...a,top:0,bottom:0}}a&&(n.padding=a);const l=((e,t)=>{let n=-180,o=180,i=-90,r=90;for(const s of e){const{longitude:e,latitude:a}=t(s);e>n&&(n=e),e<o&&(o=e),a>i&&(i=a),a<r&&(r=a)}return[[n,i],[o,r]]})(e,t);return(0,te.Z)({bounds:l,width:r,height:s,...n})})(e,t,n||{},h,{width:o,height:i});return{...r,...pe,zoom:Math.min(Math.max(r.zoom,0),22)}}catch(e){return y&&y({name:"maps-sdk-fit-bounds-error",payload:{message:e.message,stack:e.stack,params:JSON.stringify({width:o,height:i,opts:n})}}),h}},getMercatorViewport:()=>{if(!F.current)return null;const{width:e,height:t}=F.current.getBoundingClientRect();return new s.Z({...h,width:e,height:t})}}))),(0,l.tZ)("div",{ref:F,className:k({...ue,...L}),children:h?(0,l.BX)(l.HY,{children:[T?(0,l.tZ)(N,{viewState:h,layers:n,overlays:r,onViewStateChange:m,onClick:f,onHover:v,onError:y,styleFlavor:P,tiles:T.tiles,overrides:null==C?void 0:C.MapboxGL,theme:_}):(0,l.tZ)(z,{viewState:h,layers:n,overlays:r,onViewStateChange:m,onClick:f,onHover:v,onError:y,styleFlavor:P,overrides:null==C?void 0:C.GoogleMaps,theme:_}),(0,l.tZ)(U,{onViewStateChange:m,isLoadingLocation:E,onClickLocateMe:x,onClickZoomIn:S?R:null,onClickZoomOut:S?B:null,overrides:null==C?void 0:C.MapControls}),(0,l.tZ)(ae,{isMapboxGLEngine:Boolean(T),whyEngine:Z,sessionId:a,tripId:c,workflowId:g,onError:y})]}):null})}const he=(0,o.forwardRef)(ge);function me(e,t){const{onError:n}=e,i=(0,o.useRef)(n);i.current=n;const r=(0,o.useCallback)((e=>{var t;return null===(t=i.current)||void 0===t?void 0:t.call(i,e)}),[]),s=(0,o.useCallback)(((e,t)=>{r({name:"maps-sdk-error-boundary",payload:{message:e.message,stack:e.stack,type:t}})}),[r]);return(0,l.tZ)(a.ErrorBoundary,{FallbackComponent:c,onError:s,children:(0,l.tZ)(he,{...e,onError:r,ref:t})})}const fe=(0,o.forwardRef)(me)},99612:(e,t,n)=>{n.d(t,{bw:()=>i,u9:()=>o});const o="/_maps_provenance",i="DO_NOT_REPORT_PROVENANCE"}}]);